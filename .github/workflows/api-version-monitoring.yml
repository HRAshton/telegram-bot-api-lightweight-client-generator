# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: Monitor API version
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering of the workflow
jobs:
  compare-versions:
    runs-on: ubuntu-latest
    outputs:
      api_version: ${{ steps.fetch-api-version.outputs.api_version }}
      package_version: ${{ steps.fetch-version.outputs.package_version }}
      updated: >-
        ${{ ! startsWith(steps.fetch-version.outputs.package_version, steps.fetch-api-version.outputs.api_version) }}
    steps:
      - name: Fetch latest NPM package version
        id: fetch-version
        run: |
          # Fetch the latest version of the NPM package via HTTP request
          http_content=$(curl -s https://registry.npmjs.org/telegram-bot-api-lightweight-client/latest)
          version=$(echo $http_content | jq -r '.version')
          # echo "package_version=$version" >> "$GITHUB_OUTPUT"

      - name: Fetch latest Telegram Bot API version
        id: fetch-api-version
        run: |
          # Fetch the latest version of the Telegram Bot API via HTTP request
          http_content=$(curl -s https://core.telegram.org/bots/api-changelog)
          version=$(echo $http_content | grep -oP '(?<=Bot API )([\d\.]+)' | head -n 1)
          echo "api_version=$version" >> "$GITHUB_OUTPUT"

  create-issue:
    runs-on: ubuntu-latest
    needs: compare-versions
    if: ${{ needs.compare-versions.outputs.updated == 'true' }}
    outputs:
      issue_url: ${{ steps.create-issue.outputs.url }}
    steps:
      - uses: actions/checkout@v3

      - name: Create issue
        id: create-issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_VERSION: ${{ needs.compare-versions.outputs.api_version }}
          PACKAGE_VERSION: ${{ needs.compare-versions.outputs.package_version }}
        with:
          update_existing: true
          search_existing: all

  update-submodule:
    runs-on: ubuntu-latest
    needs: compare-versions
    if: ${{ needs.compare-versions.outputs.updated == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Run generator and copy generated files to ./output
        run: bash ./build-and-commit.sh

      - name: Create new branch for submodule
        working-directory: ./client
        run: git checkout -b "new_version/${{ needs.compare-versions.outputs.api_version }}" origin/master

      - name: Update submodule's files
        working-directory: ./client
        run: bash ../apply-changes-to-submodule.sh ${{ needs.compare-versions.outputs.api_version }}

      - name: Verify version
        working-directory: ./client
        run: |
          api_version=${{ needs.compare-versions.outputs.api_version }}.0
          openapi_version=$(jq -r '.info.version' ./schema/openapi.json)
          branch_version=$(git rev-parse --abbrev-ref HEAD | grep -oP '(?<=/)([\d\.]+)').0

          echo "API version: $api_version"
          echo "OpenAPI version: $openapi_version"
          echo "Branch version: $branch_version"

          if [[ $openapi_version != $api_version || $api_version != $branch_version ]]; then
              echo "Versions do not match"
              exit 60
          fi

          if [[ ! $branch_version =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
              echo "Version has incorrect format"
              exit 61
          fi

      - name: Push changes
        working-directory: ./client
        run: |
          SUBMODULE_URL=$(git config --file ../.gitmodules submodule.client.url)
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@${SUBMODULE_URL#https://}
          git push origin "new_version/${{ needs.compare-versions.outputs.api_version }}"
